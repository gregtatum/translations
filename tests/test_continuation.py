from dataclasses import dataclass
from typing import Any, Literal
import pytest
import yaml
import json
from pathlib import Path
from fixtures import DataDir, get_taskgraph_files


class CorporaMocks:
    """
    Provides all of the files and URLs for mocking out corpora.
    """
    def __init__(self, name: str):
        def build_corpus(name):
            return "\n".join([f"{name} {i}" for i in range(3)]) + "\n"

        self.name = name
        self.src = build_corpus(f"{name} ru")
        self.trg = build_corpus(f"{name} en")
        self.tok_src = build_corpus(f"{name} tok ru")
        self.tok_trg = build_corpus(f"{name} tok en")
        self.aln = build_corpus(f"{name} alignments")
    
    def get_fetch_mocks(self, data_dir: DataDir):
        mocks = {}
        data_dir.mkdir("mocked-downloads")
        def add_mock(name, contents):
            url = f"https://example.com/{name}"
            mocks[url] = data_dir.create_zst(f"mocked-downloads/{name}", contents)
        
        add_mock(f"{self.name}.ru.zst", self.src)
        add_mock(f"{self.name}.en.zst", self.trg)
        add_mock(f"{self.name}.tok-icu.ru.zst", self.tok_src)
        add_mock(f"{self.name}.tok-icu.en.zst", self.tok_trg)
        add_mock(f"{self.name}.aln.zst", self.aln)
        
        return json.dumps(mocks)

def get_config_rewriter(yaml_str: str):
    """Returns a function that will rewrite the config for corpus continuation."""
    
    def rewrite(config: dict[str, Any]):
        corpora_yaml = yaml.safe_load(yaml_str)
        config["datasets"] = { "devtest": config["datasets"]["devtest"] }
        config["continuation"] = corpora_yaml["continuation"]
    return rewrite


corpora_yaml_str = """
continuation:
  backtranslations:
    src: https://example.com/backtranslations.ru.zst
    trg: https://example.com/backtranslations.en.zst
  original-parallel:
    src: https://example.com/original-parallel.ru.zst
    trg: https://example.com/original-parallel.en.zst
  student-distillation:
    src: https://example.com/student-distillation.ru.zst
    trg: https://example.com/student-distillation.en.zst
"""

@dataclass
class TestCorpusParams():
    corpus: str
    src: str
    trg: str

test_corpus_params = [
    # TestCorpusParams(
    #     corpus="backtranslations",
    #     src="mono.ru.zst",
    #     trg="mono.en.zst"
    # ),
    TestCorpusParams(
        corpus="original-parallel",
        src="corpus.ru.zst",
        trg="corpus.en.zst"
    ),
    TestCorpusParams(
        corpus="student-distillation",
        src="corpus.ru.zst",
        trg="corpus.en.zst"
    )
]

@pytest.mark.parametrize(
    "params",
    test_corpus_params,
    ids=[p.corpus for p in test_corpus_params]
)
def test_corpus_continuation(params: TestCorpusParams):
    data_dir = DataDir("test_corpus_continuation")
    datasets_mock = CorporaMocks(params.corpus)
    config_path = data_dir.rewrite_ci_config(get_config_rewriter(corpora_yaml_str))
    task_name = f"continuation-corpus-{params.corpus}-ru-en"

    resolved_tasks: list[str] = [
        task["label"] for task in get_taskgraph_files(config_path).resolved.values()
    ]
    print("Resolved tasks:", resolved_tasks)
    
    print("Ensure that none of the merge tasks were generated.")
    assert "merge-corpus-ru-en" not in resolved_tasks
    assert "merge-mono-trg-en" not in resolved_tasks
    assert "merge-translated-ru-en" not in resolved_tasks
    
    print("Ensure that the alignment resolved_tasks were still generated.")
    assert "alignments-student-ru-en" in resolved_tasks
    assert "alignments-original-ru-en" in resolved_tasks
    
    assert task_name in resolved_tasks, "The corpus task was generated by the transform."

    data_dir.run_task(task_name, config=config_path, env={
        "MOCKED_DOWNLOADS": datasets_mock.get_fetch_mocks(data_dir)
    })
    data_dir.print_tree()
    
    assert data_dir.read_text(f"artifacts/{params.src}") == datasets_mock.src
    assert data_dir.read_text(f"artifacts/{params.trg}") == datasets_mock.trg
    assert not Path(data_dir.join("artifacts/corpus.aln.zst")).exists()
    
    

alignments_student_yaml_str = """
continuation:
  vocab:
    src: https://example.com/vocab.spm
    trg: https://example.com/vocab.spm
  student-distillation:
    src: https://example.com/student-distillation.ru.zst
    trg: https://example.com/student-distillation.en.zst
    tok-src: https://example.com/student-distillation.tok-icu.ru.zst
    tok-trg: https://example.com/student-distillation.tok-icu.en.zst
    alignments: https://example.com/student-distillation.aln.zst
"""

alignments_teacher_yaml_str = """
continuation:
  backtranslations:
    src: https://example.com/backtranslations.ru.zst
    trg: https://example.com/backtranslations.en.zst
    tok-src: https://example.com/backtranslations.tok-icu.ru.zst
    tok-trg: https://example.com/backtranslations.tok-icu.en.zst
    alignments: https://example.com/backtranslations.aln.zst
  original-parallel:
    src: https://example.com/original-parallel.ru.zst
    trg: https://example.com/original-parallel.en.zst
    tok-src: https://example.com/original-parallel.tok-icu.ru.zst
    tok-trg: https://example.com/original-parallel.tok-icu.en.zst
    alignments: https://example.com/original-parallel.aln.zst
"""

@dataclass
class TestAlignmentsParams():
    corpus: str
    corpora_config: Literal["student"] | Literal["teacher"]
    src: str
    trg: str
    tok_src: str
    tok_trg: str
    aln: str

test_alignments_params = [
    # The backtranslations corpus is only needed when training a student.
    TestAlignmentsParams(
        corpus="backtranslations",
        corpora_config="teacher",
        src="mono.ru.zst",
        trg="mono.en.zst",
        tok_src="mono.tok-icu.ru.zst",
        tok_trg="mono.tok-icu.en.zst",
        aln="mono.aln.zst"
    ),
    TestAlignmentsParams(
        corpus="original-parallel",
        corpora_config="teacher",
        src="corpus.ru.zst",
        trg="corpus.en.zst",
        tok_src="corpus.tok-icu.ru.zst",
        tok_trg="corpus.tok-icu.en.zst",
        aln="corpus.aln.zst"
    ),
    TestAlignmentsParams(
        corpus="student-distillation",
        corpora_config="student",
        src="corpus.ru.zst",
        trg="corpus.en.zst",
        tok_src="corpus.tok-icu.ru.zst",
        tok_trg="corpus.tok-icu.en.zst",
        aln="corpus.aln.zst"
    )
]

@pytest.mark.parametrize(
    "params",
    test_alignments_params,
    ids=[f"{p.corpus},{p.corpora_config}" for p in test_alignments_params]
)
def test_alignments_continuation(params: TestAlignmentsParams):
    # Make sure and rename the data dir for each config, as the config is cached
    # based on the path name, and "student" and "teacher" have different configs.
    data_dir = DataDir(f"test_alignments_{params.corpora_config}_continuation")
    datasets_mock = CorporaMocks(params.corpus)
    corpora_config = {
        "student": alignments_student_yaml_str,
        "teacher": alignments_teacher_yaml_str,
    }
    yaml_str = corpora_config[params.corpora_config]

    config_path = data_dir.rewrite_ci_config(get_config_rewriter(yaml_str))
    task_name = f"continuation-corpus-{params.corpus}-ru-en"

    tasks_by_id = get_taskgraph_files(config_path).resolved
    tasks_by_label: dict[str, dict[str, Any]] = {
        task["label"]: task for task in tasks_by_id.values()
    }
    
    print("Resolved tasks:")
    for label, task in tasks_by_label.items():
        print(" -", label)
        for dependency_label in task["dependencies"].keys():
            print("    -", dependency_label)
    
    if params.corpora_config == "teacher":    
        # backtranslations and original-parallel
        assert "merge-corpus-ru-en" not in tasks_by_label
        assert "merge-mono-trg-en" not in tasks_by_label
        assert "merge-translated-ru-en" in tasks_by_label
        
        assert "alignments-student-ru-en" in tasks_by_label
        assert "alignments-original-ru-en" not in tasks_by_label
        assert "alignments-backtranslated-ru-en" not in tasks_by_label
    else:
        print("!!! yaml_str", yaml_str)
        # Just student-distillation
        assert "merge-corpus-ru-en" not in tasks_by_label
        assert "merge-mono-trg-en" not in tasks_by_label
        assert "merge-translated-ru-en" not in tasks_by_label
        
        assert "alignments-student-ru-en" not in tasks_by_label
        assert "alignments-original-ru-en" not in tasks_by_label
        assert "alignments-backtranslated-ru-en" not in tasks_by_label
        
    assert task_name in tasks_by_label, "The corpus task was generated by the transform."

    data_dir.run_task(task_name, config=config_path, env={
        "MOCKED_DOWNLOADS": datasets_mock.get_fetch_mocks(data_dir)
    })
    data_dir.print_tree()

    assert data_dir.read_text(f"artifacts/{params.src}") == datasets_mock.src
    assert data_dir.read_text(f"artifacts/{params.trg}") == datasets_mock.trg
    assert data_dir.read_text(f"artifacts/{params.tok_src}") == datasets_mock.tok_src
    assert data_dir.read_text(f"artifacts/{params.tok_trg}") == datasets_mock.tok_trg
    assert data_dir.read_text(f"artifacts/{params.aln}") == datasets_mock.aln
